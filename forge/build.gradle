plugins {
    id 'xplat-loader'
    id 'net.neoforged.moddev.legacyforge'
}

// ////////////////////////////// MDG config //////////////////////////////
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
    config "${mod_id}.forge.mixins.json"
}

legacyForge {
    version = project.forge_version

    parchment {
        minecraftVersion = project.parchment_minecraft_version
        mappingsVersion = project.parchment_mappings_version
    }

    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at_common.absolutePath)
    }
    // validateAccessTransformers = true

    runs {
        configureEach {
            // Separate working directory of each runs
            gameDirectory = project.file("runs/$name")

            // log4j2 bug fix
            systemProperty 'log4j2.formatMsgNoLookups', 'true'

            // mixin
            systemProperty 'mixin.debug.verbose', 'true'
            systemProperty 'mixin.debug.export', 'true'
            systemProperty 'mixin.checks', 'true'
            systemProperty 'mixin.dumpTargetOnFailure', 'true'
            systemProperty 'mixin.hotSwap', 'true'

            // Comma separated, e.g. 'SCAN,REGISTRIES'
            // SCAN         For mods scan.
            // REGISTRIES   For firing of registry events.
            // REGISTRYDUMP For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
        client {
            client()
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }
        server {
            server()
            programArgument '-nogui'
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }
        gameTestServer {
            type = 'gameTestServer'
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }
        data {
            data()
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll \
                    '--mod', project.mod_id,
                    '--all',
                    '--output', file('src/generated/resources/').getAbsolutePath(),
                    '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        "$mod_id" {
            sourceSet sourceSets.main
        }
    }
}

// include resources generated by data generators
sourceSets.main.resources { srcDir 'src/generated/resources/' }

dependencies {
    annotationProcessor "org.spongepowered:mixin:$mixin_version:processor"
    testAnnotationProcessor "org.spongepowered:mixin:$mixin_version:processor"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:$mixin_extras_version"))
    jarJar(implementation("io.github.llamalad7:mixinextras-forge:$mixin_extras_version")) {
        version {
            strictly project.mixin_extras_request
            prefer project.mixin_extras_version
        }
    }

    // //////////// enough items ////////////
    // JEI
    modCompileOnly "mezz.jei:$jei_artifact_id-common-api:$jei_version"
    modCompileOnly "mezz.jei:$jei_artifact_id-forge-api:$jei_version"
    if (project.runtime_variants_enough_items == 'jei') {
        modRuntimeOnly "mezz.jei:$jei_artifact_id-forge:$jei_version"
    }

    // REI
    // REI's dependency is quite complicated, so let's just be lazy and depend on the full artifact _(:3)/_)_
    if (project.runtime_variants_enough_items == 'rei') {
        implementation 'me.shedaniel.cloth:basic-math:0.6.1'
        modImplementation "dev.architectury:architectury-forge:$architectury_version"
        modImplementation "me.shedaniel.cloth:cloth-config-forge:$cloth_config_version"
        modImplementation "me.shedaniel:RoughlyEnoughItems-forge:$rei_version"
    } else {
        compileOnly 'me.shedaniel.cloth:basic-math:0.6.1'
        modCompileOnly "dev.architectury:architectury-forge:$architectury_version"
        modCompileOnly "me.shedaniel.cloth:cloth-config-forge:$cloth_config_version"
        modCompileOnly "me.shedaniel:RoughlyEnoughItems-forge:$rei_version"
    }

    // EMI
    modCompileOnly "dev.emi:emi-forge:$emi_version:api"
    if (project.runtime_variants_enough_items == 'emi') {
        modRuntimeOnly "dev.emi:emi-forge:$emi_version"
    }
    if (project.runtime_variants_enough_items == 'jei+emi') {
        modRuntimeOnly "mezz.jei:$jei_artifact_id-forge:$jei_version"
        modRuntimeOnly "dev.emi:emi-forge:$emi_version"
    }

    // //////////// looking tooltip (Jade / WTHIT / TOP) ////////////
    // Jade
    if (project.runtime_variants_looking_tooltip == 'jade') {
        modImplementation "curse.maven:jade-324717:$jade_version"
    } else {
        modCompileOnly "curse.maven:jade-324717:$jade_version"
    }

    // WTHIT
    modCompileOnly "mcp.mobius.waila:wthit-api:forge-$wthit_version"
    if (project.runtime_variants_looking_tooltip == 'wthit') {
        modRuntimeOnly "lol.bai:badpackets:forge-$badpackets_version"
        modRuntimeOnly "mcp.mobius.waila:wthit:forge-$wthit_version"
    }

    // TOP
    if (project.runtime_variants_looking_tooltip == 'top') {
        modImplementation "curse.maven:the-one-probe-245211:$top_version"
    } else {
        modCompileOnly "curse.maven:the-one-probe-245211:$top_version"
    }

    // //////////// Other API ////////////
    // leave to implementors

    // //////////// QoL ////////////
    modRuntimeOnly "curse.maven:catalogue-459701:$catalogue_version"

    modRuntimeOnly "curse.maven:configured-457570:$configured_version"

    modRuntimeOnly "curse.maven:searchables-858542:$searchables_version"
    modRuntimeOnly "curse.maven:controlling-250398:$controlling_version"

    modRuntimeOnly "curse.maven:spark-361579:$spark_version"

    modRuntimeOnly "curse.maven:XaeroMinimap-263420:$xaerominimap_version"
    modRuntimeOnly "curse.maven:XaeroWorldmap-317780:$xaeroworldmap_version"
}

expandProps {
    filter.add 'META-INF/mods.toml'
    props.putAll([
            'forge_version': forge_version,
            'minecraft_request': minecraft_request,
            'fml_request': fml_request,
            'forge_request': forge_request,
    ])
}

jar {
    manifest.attributes([
            "MixinConfigs": "${mod_id}.mixins.json,${mod_id}.forge.mixins.json"
    ])
}
